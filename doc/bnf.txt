
lexer
-----

	[.]		:	qualisasi wide character	->	symChar


END	 

								!
								-
								+
						prefix

					real
					integer
					string
					char
					id
					const id
					var
					array[]
					func()
					( expr )
					prefix
					
				term

				term
				mulDivMod	*	/	%
				addSub		+	-
				assign		:=
			
			expr:

						char
						string
						real
						integer
						
					constTerm:

				id	=	constTerm ;
				id	=	constTerm  , parserDeclConst 
				
			expr
		parserStatement
		
				parserArrayDim
			parserDeclArray (local)
			parserDeclVar 	(local)
		parserFunction
		
			parserDeclType
				parserArrayDim
			parserDeclArray (global)
			parserDeclVar 	(global)
			parserDeclConst (global)
		parserDeclaration


	parser :
	
       ^
BEGIN  |


/**/

### {parserDeclConst}



	"const" -> #1	[id] 	-> "=" 	|->	const 	integer		|->		|				->	";" -> #2
									|->	const	real		|-^		|-> "," -> #1
									|->	const 	string		|-^
									|->	const 	char		|-^
									
	#2

	Questo nodo Ã¨ un caso speciale, in quanto non genera direttamente 
	una foglia (nodo) dell'albero (ast), piuttosto va a sostituire
	il simbolo con la costante.
	
	
 
### {parserDeclVar}



	"Var" -> #1	[id] 	-> ":"	|->		integer		|->		|									->	";" -> #2
								|->		real		|-^		|-> 				->	"," -> #1
								|->		char		|-^		|-> :=	-> expr  	->
								|->		byte		|-^
	#2



### {parserDeclArray}



	"array" -> #1	[id] 	-> ":"	[]		|->		integer		|->		|									->	";" -> #2
											|->		real		|-^		|-> 					->	"," -> #1
											|->		char		|-^		|-> :=	-> InitList  	->
											|->		byte		|-^
											|->		id			|-^
	#2



### {parserDeclType}



	"type" -> [id] 	-> "{"	|->		parserDeclVar		|->		|			 |->							|->	";" -> #2
							|->		parserDeclArray		|-^		|-> 	"}"  |-> := { Initialiser List } 	|-^

	#2


 
### {parserDeclFunction}



	"function" 	f	( parserDeclVar	|| parserDeclArray) : integer || real { block } ;
	 
	#2



/**/


